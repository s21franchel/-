
# Техническое задание на интеграцию Яндекс.Карт с системой доставки I-Shop

## 1. Общие сведения
**Наименование системы:** I-Shop (интернет-магазин с системой доставки)  
**Интегрируемый сервис:** Яндекс.Карты API  
**Цель интеграции:** Автоматизация построения маршрутов доставки и предоставление клиентам возможности отслеживания курьеров в реальном времени

## 2. Состав системы
### 2.1 Участники системы
| Компонент | Тип | Описание | Технологии |
|-----------|-----|----------|------------|
| Клиент | Person | Покупатель товаров, отслеживает доставку | Мобильное приложение (React) |
| Менеджер | Person | Контролирует процесс доставки | Telegram Bot |
| Frontend I-Shop | System | Интерфейс отображения карт | React, WebSocket |
| Микросервис заказов | System | Обработка заказов | Node.js, REST API |
| Микросервис доставки | System | Управление логистикой | Python, gRPC |
| Яндекс.Карты API | System | Сервис карт и маршрутизации | HTTPS/JSON |
| СДЭК API | System | Сервис логистики | SOAP |
| Telegram Bot | System | Уведомления менеджеру | Telegram Bot API |

### 2.2 Диаграмма контекста
```plantuml
@startuml Контекст: Интеграция Яндекс.Карт с I-Shop
!include <C4/C4_Context>

Person(клиент, "Клиент", "Покупает товары, отслеживает доставку")
Person(менеджер, "Менеджер", "Контролирует заказы")

System_Boundary(i_shop_boundary, "I-Shop") {
  System(ui, "Frontend", "React-приложение")
  System(orders_ms, "Микросервис заказов", "Node.js")
  System(delivery_ms, "Микросервис доставки", "Python")
}

System(яндекс_карты, "Яндекс.Карты API", "Geocoder + MapKit")
System(служба_доставки, "СДЭК API", "Логистика")
System(telegram_bot, "Telegram Bot", "Уведомления")

Rel(клиент, ui, "Оформляет заказ", "HTTPS")
Rel(ui, orders_ms, "Данные заказа", "REST")
Rel(orders_ms, delivery_ms, "Запрос доставки", "gRPC")
Rel(delivery_ms, яндекс_карты, "Запрос маршрута", "HTTPS")
Rel(delivery_ms, служба_доставки, "Создание заказа", "SOAP")
Rel(delivery_ms, telegram_bot, "Уведомление", "Webhook")
Rel(менеджер, telegram_bot, "Получает уведомления", "Telegram API")
@enduml
```

## 3. Требования к интеграции
### 3.1 Функциональные требования
1. Получение координат адресов:
   - Конвертация адреса в координаты через Яндекс.Geocoder
   - Точность определения адреса: ≥ 95%

2. Построение маршрутов:
   - Оптимальный маршрут (склад → клиент)
   - Время обновления: ≤ 5 секунд

3. Уведомления:
   - Менеджеру: при новом заказе (Telegram)
   - Клиенту: при изменении статуса доставки (WebSocket)

### 3.2 Нефункциональные требования
1. Производительность:
   - Время отклика API Яндекс.Карт: < 1 сек
   - Максимальная нагрузка: 100 запросов/мин

2. Безопасность:
   - HTTPS для всех внешних вызовов
   - Валидация входящих данных

## 4. Этапы реализации
1. Настройка API Яндекс.Карт:
   - Получение API-ключа
   - Подключение Geocoder и MapKit

2. Разработка интеграции:
   - Реализация микросервиса доставки (Python)
   - Настройка Webhook для Telegram

3. Тестирование:
   - Проверка точности геокодирования
   - Тест нагрузки

4. Ввод в эксплуатацию

## 5. Критерии приемки
1. Успешное построение маршрута в 98% случаев
2. Задержка обновления позиции курьера ≤ 10 сек
3. Отправка уведомлений менеджеру в течение 1 мин после заказа
```

Этот файл можно сохранить как `ТЗ_ЯндексКарты_I-Shop.md` и использовать как основу для проекта. Файл содержит:
1. Структурированное описание системы
2. Диаграмму контекста на PlantUML
3. Четкие требования
4. План реализации
5. Критерии проверки

Для работы с PlantUML-диаграммой можно использовать:
- Локальные редакторы (VSCode с плагином PlantUML)
- Онлайн-сервисы (plantuml.com)
- Встроить в документацию (например, в GitLab wiki)

